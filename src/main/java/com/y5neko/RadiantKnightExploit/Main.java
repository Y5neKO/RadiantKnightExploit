package com.y5neko.RadiantKnightExploit;

import com.y5neko.RadiantKnightExploit.UI.AboutStage;
import com.y5neko.RadiantKnightExploit.UI.CheckUpdateStage;
import com.y5neko.RadiantKnightExploit.UI.ProxyStage;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import org.scenicview.ScenicView;

import java.io.*;
import java.nio.file.*;
import java.util.Objects;

public class Main extends Application {
    private MenuBar menuBar;

    public static Image icon = new Image("img/icon.png");   // Image对象是通过底层的构造方法获取文件内容，所以可以直接指定基于resource目录的绝对路径

    public static void main(String[] args) {
        firstInit();
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        // 新建一个VBOX用以实现纵向布局
        VBox vBox = new VBox();
        buildMenu();
        vBox.getChildren().addAll(menuBar);

        // 新建一个HBOX实现横向布局
        HBox hBox = new HBox();
        hBox.setLayoutX(10);
        vBox.getChildren().add(hBox);

        //新建一个Scene
        Scene scene = new Scene(vBox);

        primaryStage.setScene(scene);
        primaryStage.setTitle("RadiantKnightExploit");
        primaryStage.setHeight(800);
        primaryStage.setWidth(1300);
        primaryStage.getIcons().add(icon);
        primaryStage.show();

//        ScenicView.show(scene);
    }

    /**
     * 构建顶部菜单
     */
    private void buildMenu(){
        menuBar = new MenuBar();
        Menu settingMenu = new Menu("设置");
        Menu helpMenu = new Menu("帮助");
        menuBar.getMenus().addAll(settingMenu, helpMenu);

        MenuItem settingProxy = new MenuItem("代理设置");
        settingMenu.getItems().addAll(settingProxy);
        settingProxy.setOnAction(event -> {
            new ProxyStage();
        });

        MenuItem about = new MenuItem("关于");
        helpMenu.getItems().addAll(about);
        about.setOnAction(event -> {
            new AboutStage();
        });

        MenuItem checkUpdate = new MenuItem("检查更新");
        helpMenu.getItems().add(checkUpdate);
        checkUpdate.setOnAction(event -> {
            new CheckUpdateStage();
        });
    }

    /**
     * 初始化引导,释放静态文件
     */
    private static void firstInit() {
        // 初始化文件列表
        String[] resourceFiles = new String[]{
                "config/proxy_config.json"
        };

        for (String resourceFile : resourceFiles) {
            releaseResource(resourceFile, System.getProperty("user.dir") + File.separator + resourceFile);
        }
    }

    /**
     * 释放resource文件到文件系统
     * @param sourceFile resource文件相对路径
     * @param targetFile 释放文件路径
     */
    private static void releaseResource(String sourceFile, String targetFile){
        Path checkFilePath = Paths.get(targetFile);
        Path checkPath = checkFilePath.getParent();

        if (!Files.exists(checkPath)) {
            try {
                // 如果路径不存在，则创建它（包括所有必要的父目录）
                Files.createDirectories(checkPath);
                System.out.println("Directory created successfully: " + checkPath);
            } catch (IOException e) {
                System.err.println("Failed to create directory: " + checkPath);
            }
        } else {
            System.out.println("Directory already exists: " + checkPath);
        }

        if (!Files.exists(checkFilePath)) {
            try (InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(sourceFile);
                 FileOutputStream outputStream = new FileOutputStream(targetFile)) {
                byte[] buffer = new byte[1024];
                int length;
                while ((length = Objects.requireNonNull(inputStream).read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                System.out.println("File copied successfully.");
            } catch (IOException e) {
                System.err.println(e.getMessage());
            }
        } else {
            System.out.println("File already exists: " + checkPath);
        }
    }
}